name: .NET
 
on:
  pull_request:
    branches: [main]
 
  workflow_dispatch:
 
jobs:
  build:
    runs-on: windows-latest
 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
 
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
 
      - name: Build Projekt
        run: dotnet build DHBW-Game/DHBW-Game.csproj --configuration Release
 
      - name: Prepare filtered net8.0 output
        run: |
          $projectDir = "DHBW-Game"
          $source = Join-Path $projectDir "bin/Release/net8.0"
          $destination = Join-Path $projectDir "filtered/net8.0"
 
          # Resolve full path of source folder
          $sourceFullPath = (Resolve-Path $source).Path.TrimEnd('\')
 
          # Remove previous filtered folder if exists
          if (Test-Path (Join-Path $projectDir "filtered")) {
            Remove-Item -Recurse -Force (Join-Path $projectDir "filtered")
          }
 
          # Create destination directory
          New-Item -ItemType Directory -Path $destination -Force | Out-Null
 
          # Copy everything except runtimes
          Get-ChildItem -Path $sourceFullPath -Recurse -Force | ForEach-Object {
            $relativePath = $_.FullName.Substring($sourceFullPath.Length).TrimStart('\')
 
            # Skip runtimes folder
            if ($relativePath -like "runtimes*") { return }
 
            $targetPath = Join-Path $destination $relativePath
 
            if ($_.PSIsContainer) {
              New-Item -ItemType Directory -Path $targetPath -Force | Out-Null
            } else {
              $targetDir = Split-Path $targetPath
              if (-not (Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
              }
              Copy-Item -Path $_.FullName -Destination $targetPath -Force
            }
          }
 
          # Copy runtimes/win-x64 specifically
          $runtimeSrc = Join-Path $sourceFullPath "runtimes\win-x64"
          $runtimeDest = Join-Path $destination "runtimes\win-x64"
          if (Test-Path $runtimeSrc) {
            Copy-Item -Path $runtimeSrc -Destination $runtimeDest -Recurse -Force
          }
        shell: pwsh
 
      - name: Upload filtered artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: DHBW Game
          path: DHBW-Game/filtered/net8.0
 
      - name: Comment artifact link on PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          RUN_ID: ${{ github.run_id }}
        run: |
          $headers = @{
            Authorization = "token $env:GH_TOKEN"
            Accept = "application/vnd.github.v3+json"
          }
 
          $artifactsUrl = "https://api.github.com/repos/$env:REPO/actions/runs/$env:RUN_ID/artifacts"
          $artifacts = Invoke-RestMethod -Uri $artifactsUrl -Headers $headers
 
          $artifact = $artifacts.artifacts | Where-Object { $_.name -eq "DHBW Game" }
 
          if ($artifact -ne $null) {
            $artifactLink = "https://github.com/$env:REPO/actions/runs/$env:RUN_ID/artifacts/$($artifact.id)"
            $body = @{
              body = "üì¶ Das Build-Artifact **DHBW Game** ist verf√ºgbar: [Jetzt herunterladen]($artifactLink)"
            } | ConvertTo-Json
 
            $commentUrl = "https://api.github.com/repos/$env:REPO/issues/$env:PR_NUMBER/comments"
            Invoke-RestMethod -Uri $commentUrl -Method Post -Headers $headers -Body $body -ContentType "application/json"
          } else {
            Write-Host "‚ùó Artifact 'DHBW Game' wurde nicht gefunden."
          }
        shell: pwsh